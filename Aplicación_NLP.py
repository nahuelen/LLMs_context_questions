# -*- coding: utf-8 -*-
"""Proyecto entrega parte 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uNaNQ6b6ln6l6zNLoxWEWlQCCWAmDBlT
"""

!pip install transformers
from transformers import pipeline
nlp = pipeline("question-answering", model="PlanTL-GOB-ES/roberta-base-bne-sqac")

#importar la biblioteca drive en la notebook
from google.colab import drive
drive.mount('/content/drive')

###cargo documento elaborado para realizar el chatbot
with open('/content/drive/MyDrive/Uba/Maestria datos financieros/Metodos datos no estructurados/Trabajos finales/Monotributo.txt', 'r') as file:
     doc = file.read()

##genero preguntas a evaluar
preguntas=["¿Que es el monotributo?",
           "¿En que año se origino?",
           "¿Quien puede ser monotributista?",
           "¿Que pago con el monotributo?",
           "¿Como se asignan las categorias?",
           "¿Cual es el precio unitario maximo que puede facturar?",
           "¿Que actividad puede realizar?",
           "¿Que ingreso máximo debe tener en venta de servicios?",
           "¿Que ingreso máximo debe tener en venta de cosas?",
           "¿Cuantas actividades puede realizar?",
           "¿Cuantas unidades de explotacion puede tener?",
           "¿Puede tener empleados?",
           "¿Puede estar en relacion de dependencia y ser monotributista al mismo tiempo?",
           "¿Abona los conceptos dejubilacion y obra social del monotributo si es empleado?",
           "¿Puede importar?",
           "¿Puede adherirse un residente del exterior?",
           "¿Pueden vender al exterior?",
           "¿Como se cuentan los inmubles en la actividad de locación de inmuebles?",
           "¿Como categoriza cuando se inicia la inscripcion?",
           "¿Cuando se realizan las recategorizaciones?",
           "En caso de realizar venta de cosas y prestacion de servicios ¿Como define la actividad principal?"
           ]

##import librerias
import pandas as pd
import time
# import contexto
context = doc

# genero lista de resultados
resultados = []

# genero for para iteractuar sobre cada pregunta
for pregunta in preguntas:
    start_time = time.time()
    qa_results = nlp(question=pregunta, context=context)
    end_time = time.time()

    # calculo el tiempo de respuesta ya que se va a evaluar el costo computacional
    tiempo_respuesta = end_time - start_time

    # almaceno los resultados
    resultados.append({
        "Pregunta": pregunta,
        "Respuesta": qa_results['answer'],
        "Tiempo (s)": tiempo_respuesta
    })

# convierto en un DataFrame
resultados_Roberta = pd.DataFrame(resultados)
resultados_Roberta.head(30)

##analizo respuestas y marco correctas
resultados_Roberta['Correctas']=['1','1','1','1','1','1','1','1','1','1','1','0','0','0','0','1','0','0','1','1','1']

resultados_Roberta.head(30)

media_tiempo_Roberta=resultados_Roberta['Tiempo (s)'].mean()
print(f'Tiempo de espera promedio por respuesta:{media_tiempo_Roberta}')
tasa_acierto_Roberta=(resultados_Roberta['Correctas']=='1').sum()/len(resultados_Roberta)
print(f'Tasa de aciertos: {tasa_acierto_Roberta}')

"""###RoBERTa"""

from transformers import pipeline

# Cargar el pipeline de preguntas y respuestas basado en RoBERTa
qa_pipeline = pipeline("question-answering", model="deepset/roberta-base-squad2", tokenizer="deepset/roberta-base-squad2")

# genero lista de resultados
resultados = []

# genero for para iteractuar sobre cada pregunta
for pregunta in preguntas:
    start_time = time.time()
    respuesta = qa_pipeline(question=pregunta, context=context)
    end_time = time.time()

    # Calcular el tiempo de respuesta
    tiempo_respuesta = end_time - start_time

    # Almacenar los resultados
    resultados.append({
        "Pregunta": pregunta,
        "Respuesta": respuesta['answer'],
        "Tiempo (s)": tiempo_respuesta
    })

resultados_RoBERTa=pd.DataFrame(resultados)
resultados_RoBERTa.head(30)

resultados_RoBERTa['Correctas']=['1','1','0','0','0','1','0','1','1','1','1','0','0','0','0','1','0','0','0','1','0']
resultados_RoBERTa.head(30)

media_tiempo_RoBERTa=resultados_RoBERTa['Tiempo (s)'].mean()
print(f'Tiempo de espera promedio por respuesta:{media_tiempo_RoBERTa}')
tasa_acierto_RoBERTa=(resultados_RoBERTa['Correctas']=='1').sum()/len(resultados_RoBERTa)
print(f'Tasa de acierto:{tasa_acierto_RoBERTa}')

